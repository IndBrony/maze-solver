package maze

import "testing"

func TestAvailablePaths(t *testing.T) {
	basicTesting := func(t *testing.T, size int, walls []int, position int, expectedOutput []int) {
		output := availablePaths(size, walls, position)
		for _, val := range output {
			exist := false
			for _, expectedVal := range expectedOutput {
				if expectedVal == val {
					exist = true
				}
			}
			if !exist || len(output) != len(expectedOutput) {
				t.Errorf(
					"Test Failed on input:\n\tsize:\t%v\n\twalls:\t%v\n\tposition:\t%v\nExpecting output:\n\t%v\nBut got\n\t%v",
					size,
					walls,
					position,
					expectedOutput,
					output,
				)
			}
		}
	}
	simpleWalls := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 23, 24, 25, 26, 28}
	basicTesting(t, 10, simpleWalls, 12, []int{11, 13})
	basicTesting(t, 10, simpleWalls, 27, []int{17, 37})
	basicTesting(t, 10, simpleWalls, 85, []int{84, 75, 86, 95})
	basicTesting(t, 10, simpleWalls, 80, []int{79, 70, 90})

	wallChar := []byte("#")[0]
	maze := []byte("#####################        #   #       ###### ##### # ##### ##   # #   # # #   # ## ### # ### ### # # ## #   # #       # # ## ### # # ### ##### ##       #   #   #   #### ####### # ##### ##   #       #       #### ### ### ####### ##         # #   #   ## ### ### ### ### #### # #   #       # # ## # # ### ##### ### ##   #   # #   # #   ## ### ### # ####### ## # #   # # # #   # ## # ### ### # # # # ##   #           ######################")
	walls := []int{}
	for index, char := range maze {
		if char == wallChar {
			walls = append(walls, (index + 1))
		}
	}
	basicTesting(t, 21, walls, 22, []int{23})
}

/*
	21 x 21 maze

	# # # # # # # # # # # # # # # # # # # # #
	                #       #               #
	# # # # #   # # # # #   #   # # # # #   #
	#       #   #       #   #   #       #   #
	#   # # #   #   # # #   # # #   #   #   #
	#   #       #   #               #   #   #
	#   # # #   #   #   # # #   # # # # #   #
	#               #       #       #       #
 	# # #   # # # # # # #   #   # # # # #   #
	#       #               #               #
	# # #   # # #   # # #   # # # # # # #   #
	#                   #   #       #       #
	#   # # #   # # #   # # #   # # #   # # #
	#   #   #       #               #   #   #
	#   #   #   # # #   # # # # #   # # #   #
	#       #       #   #       #   #       #
	#   # # #   # # #   #   # # # # # # #   #
	#   #   #       #   #   #   #       #   #
	#   #   # # #   # # #   #   #   #   #   #
	#       #                       #
	# # # # # # # # # # # # # # # # # # # # #

	1 line = #####################********#***#*******######*#####*#*#####*##***#*#***#*#*#***#*##*###*#*###*###*#*#*##*#***#*#*******#*#*##*###*#*#*###*#####*##*******#***#***#***####*#######*#*#####*##***#*******#*******####*###*###*#######*##*********#*#***#***##*###*###*###*###*####*#*#***#*******#*#*##*#*#*###*#####*###*##***#***#*#***#*#***##*###*###*#*#######*##*#*#***#*#*#*#***#*##*#*###*###*#*#*#*#*##***#***********#****#####################
	* = space
	# = wall

	11 x 11 maze

	# # # # # # # # # # #
	                #   #
	# # # # #   # # #   #
	#       #   #       #
	#   # # #   #   # # #
	#   #       #   #   #
	#   # # #   #   #   #
	#                   #
 	# # #   # # # # # # #
	#
	# # # # # # # # # # #

	1 line = ###########********#*######*###*##***#*#***##*###*#*####*#***#*#*##*###*#*#*##*********####*########**********###########
	* = space
	# = wall
*/
func getWalls(mazeString string, wallChar byte) []int {
	// maze21by21 := []byte("#####################********#***#*******######*#####*#*#####*##***#*#***#*#*#***#*##*###*#*###*###*#*#*##*#***#*#*******#*#*##*###*#*#*###*#####*##*******#***#***#***####*#######*#*#####*##***#*******#*******####*###*###*#######*##*********#*#***#***##*###*###*###*###*####*#*#***#*******#*#*##*#*#*###*#####*###*##***#***#*#***#*#***##*###*###*#*#######*##*#*#***#*#*#*#***#*##*#*###*###*#*#*#*#*##***#***********#****#####################")
	// maze11by11 := []byte("###########********#*######*###*##***#*#***##*###*#*####*#***#*#*##*###*#*#*##*********####*########**********###########")
	maze := []byte(mazeString)
	walls := []int{}
	for index, char := range maze {
		if char == wallChar {
			walls = append(walls, (index + 1))
		}
	}
	return walls
}
func TestShortestRoute(t *testing.T) {
	wallChar := []byte("#")[0]
	mazeString := "#####################********#***#*******######*#####*#*#####*##***#*#***#*#*#***#*##*###*#*###*###*#*#*##*#***#*#*******#*#*##*###*#*#*###*#####*##*******#***#***#***####*#######*#*#####*##***#*******#*******####*###*###*#######*##*********#*#***#***##*###*###*###*###*####*#*#***#*******#*#*##*#*#*###*#####*###*##***#***#*#***#*#***##*###*###*#*#######*##*#*#***#*#*#*#***#*##*#*###*###*#*#*#*#*##***#***********#****#####################"
	walls := getWalls(mazeString, wallChar)
	shortesRoutes := ShortestRoutes(21, walls, 22, 420)
	for _, route := range shortesRoutes {
		t.Log("\nshortestRoute:", route)
	}
}
